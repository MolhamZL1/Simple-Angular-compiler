// === Auto-generated by CodeGen ===
const APP_DATA = {
  "products": [],
  "productItems": [
    {
      "id": "p1",
      "name": "Shirt",
      "price": 29.9,
      "availableQty": 6,
      "rating": 4,
      "images": ["/img/1.jpg"],
      "description": ["Nice cotton shirt"]
    }
  ],
  "selectedProduct": null,
  "selectedImage": "",
  "total": 0
}
;

const COMPONENTS = {
  `app-root`: { template: `<app-header> <\/app-header>\n`, stylePath: `src\\Tests\\app\\app.component.css` },
  `app-header`: { template: `<section>\n  <nav class="navbar navbar-light bg-light">\n    <div class="container">\n      <a class="navbar-brand" href="#">\n        IMTHATH_IMT\n      <\/a>\n\n      <div class="d-flex justify-content-end mt-2 pointer">\n       <div class="border rounded me-3 position-relative p-2" data-bs-toggle="modal" data-bs-target="#add-to-cart">\n        ADD TO CART <i class="fa-solid fa-cart-shopping"><\/i>\n        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">\n          {{products.length}}\n          <span class="visually-hidden">unread messages<\/span>\n        <\/span>\n       <\/div>\n      <\/div>\n    <\/div>\n  <\/nav>\n\n  <div class="mt-3">\n    <app-product (arrayEmitter)="receiveProduct($event)"><\/app-product>\n  <\/div>\n<\/section>\n\n\n<!-- modal -->\n<div class="modal fade" id="add-to-cart" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">\n  <div class="modal-dialog modal-dialog-centered modal-lg">\n    <div class="modal-content">\n      <div class="modal-header border-bottom-0">\n        <h1 class="modal-title fs-5" id="staticBackdropLabel">Add To Cart Details<\/h1>\n        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"><\/button>\n      <\/div>\n      <div class="modal-body">\n        <div class="row" *ngIf="products.length > 0">\n          <div class="col-12 mt-3 border shadow-md" *ngFor="let product of products">\n            <div class="row">\n              <div class="col-2 p-1">\n                <img src={{product.images[0]}} class="object-fit-cover" alt="..." width="80px" height="80px">\n               <\/div>\n               <div class="col-3 text-center d-flex align-items-center justify-content-center">{{product.name}}<\/div>\n               <div class="col-3 text-center d-flex align-items-center justify-content-center">Quantity\n                 <div class="rounded-circle bg-danger text-white me-2 ms-2 px-2 pointer" data-action="changeQuantity(product.id,false)">-<\/div>\n                   {{product.qty}}\n                 <div class="rounded-circle bg-danger text-white ms-2 px-2 pointer" data-action="changeQuantity(product.id,true)">+<\/div>\n               <\/div>\n               <div class="col-1 d-flex align-items-center justify-content-center pointer" data-action="deleteProduct(product.id)">\n                 <i class="fa-solid fa-trash text-danger fs-6"><\/i>\n               <\/div>\n               <div class="col-3 d-flex align-items-center justify-content-end ">\n                 <button class="btn btn-block btn-primary h-50 px-2">\n                  Total {{product.total}}$\n                 <\/button>\n               <\/div>\n            <\/div>\n\n            <\/div>\n            <div class="d-flex justify-content-end mt-3">\n              <button class="btn btn-danger">Checkout({{total}})<\/button>\n            <\/div>\n        <\/div>\n        <div class="fs-3 text-center" *ngIf="products.length === 0">\n          <img src="https://static.vecteezy.com/system/resources/thumbnails/008/515/488/small/empty-cart-flat-illustration-concept-vector.jpg">\n          <div class="fs-4 text-muted">Empty<\/div>\n          <button type="button" class="btn btn-primary mt-3 w-25" data-bs-dismiss="modal" aria-label="Close">Close<\/button>\n        <\/div>\n      <\/div>\n    <\/div>\n  <\/div>\n<\/div>\n`, stylePath: `src\\Tests\\app\\components\\header\\header.component.scss` },
  `app-product`: { template: `<section>\n  <div class="container">\n    <div class="row">\n      <div class="col-12 col-sm-6 col-md-3 mt-3" *ngFor="let product of productItems">\n        <div class="card shadow-lg">\n          <div class="p-1 w-100">\n            <img src={{product.images[0]}} class="object-fit-cover position-relative" alt="..." width="100%" height="250px">\n            <span class="badge position-absolute"  [ngClass]="product.availableQty > 0 ? 'bg-success' : 'bg-danger'"\n            [ngStyle]="{\n              'right': product.availableQty > 0 ? '194px' : '170px',\n              'top': '65px'\n            }">\n        {{ product.availableQty > 0 ? 'In Stock' : 'Out of Stock' }}\n      <\/span>\n\n          <\/div>\n          <div class="card-body p-1">\n            <div class="f-size-11 fw-bold">{{product.name}}<\/div>\n            <div class="f-size-11 badge bg-info">price {{product.price}}$<\/div>\n            <div class="d-flex mt-1 mb-1">\n              <i class="fa-solid fa-star text-warning" *ngFor="let item of [].constructor(product.rating); let i = index"><\/i>\n            <\/div>\n            <!-- <div><i class="fa-solid fa-star text-warning"><\/i><i class="fa-solid fa-star text-warning"><\/i><i class="fa-solid fa-star text-warning"><\/i> <i class="fa-solid fa-star"><\/i> <i class="fa-solid fa-star"><\/i><\/div> -->\n            <div class="f-size-8 mt-1">\n             {{product.description[0]}}\n            <\/div>\n            <div class="d-flex justify-content-between mb-2">\n              <button class="btn f-size-11 px-2 py-1 mt-2" [ngClass]="product.availableQty > 0 ? 'btn-primary' : 'btn-secondary'" [disabled]="product.availableQty < 1"  data-action="addToCart(product)">Add to cart<\/button>\n              <div class="text-primary f-size-11 mt-auto me-2 pointer" data-bs-toggle="modal" data-bs-target="#staticBackdrop" data-action="selectedProduct = product">view more<\/div>\n            <\/div>\n          <\/div>\n        <\/div>\n      <\/div>\n    <\/div>\n  <\/div>\n<\/section>\n\n\n<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">\n  <div class="modal-dialog modal-dialog-centered modal-lg">\n    <div class="modal-content">\n      <div class="modal-header border-bottom-0">\n        <h1 class="modal-title fs-5" id="staticBackdropLabel">{{selectedProduct.name}} Details<\/h1>\n        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"><\/button>\n      <\/div>\n      <div class="modal-body">\n        <app-product-popup [product]="selectedProduct"><\/app-product-popup>\n      <\/div>\n    <\/div>\n  <\/div>\n<\/div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`, stylePath: `src\\Tests\\app\\components\\product\\product.component.scss` },
  `app-product-popup`: { template: `<div class="row m-0" *ngIf="product !== null">\n  <div class="col-12">\n    <div class="row">\n      <div class="col-12">\n        <div class="row">\n          <!-- MAIN IMAGE  -->\n          <div class="col-5">\n            <img\n              class="mt-2 product-main-img"\n              class="object-fit-cover"\n              src="{{ selectedImage }}"\n              alt="product-images"\n              width="300px"\n              height="300px"\n            />\n            <div class="d-flex mb-3">\n              <div class="mt-2 me-3" *ngFor="let image of product.images">\n                <img\n                  class="pointer object-fit-cover"\n                  src="{{ image }}"\n                  alt="{{ product.id }}"\n                  width="50px"\n                  height="75px"\n                  data-action="selectedImage = image"\n                />\n              <\/div>\n            <\/div>\n          <\/div>\n          <!-- PRICING AND DETAILS -->\n          <div class="col-7">\n            <div class="fs-5 fw-bold">{{ product.name }}<\/div>\n            <div class="d-flex mt-1 mb-1">\n              <i\n                class="fa-solid fa-star text-warning"\n                *ngFor="\n                  let item of [].constructor(product.rating);\n                  let i = index\n                "\n              ><\/i>\n            <\/div>\n            <div class="text-muted small mt-2">\n              <div class="mt-1">Price<\/div>\n              <div class="mt-1">${{ product.price }}<\/div>\n            <\/div>\n            <div class="mt-2">\n              <span\n                class="badge"\n                [ngClass]="\n                  product.availableQty > 0\n                    ? 'text-bg-success'\n                    : 'text-bg-danger'\n                "\n                >{{\n                  product.availableQty > 0 ? "In stoke" : "out of stock"\n                }}<\/span\n              >\n            <\/div>\n            <div class="text-muted small mt-3">Description<\/div>\n            <div class="bult-points text-muted small mt-2">\n              <ul>\n                <li>\n                  This t-shirt features a beautifully crafted design that adds\n                  an elegant touch to any wardrobe.\n                <\/li>\n                <li>\n                  The soft, breathable fabric ensures all-day comfort, while the\n                  classic fit flatters every body type.\n                <\/li>\n                <li>\n                  Designed for versatility, it pairs perfectly with jeans,\n                  shorts, or skirts.\n                <\/li>\n                <li>\n                  Fully pre-shrunk for a perfect fitâ€”no worries about fading or\n                  stretching!\n                <\/li>\n              <\/ul>\n            <\/div>\n            <!-- FILTER OPTION -->\n            <div class="row">\n              <div class="col-5">\n                <small class="fw-bold text-muted"> Frame material<\/small>\n                <ng-select\n                  [items]="product.materials"\n                  bindLabel="name"\n                  bindValue="id"\n                  [(ngModel)]="selectedMaterial"\n                ><\/ng-select>\n              <\/div>\n              <div class="col-5">\n                <small class="fw-bold text-muted"> color<\/small>\n                <ng-select\n                  [items]="product.colors"\n                  bindLabel="name"\n                  bindValue="id"\n                  [(ngModel)]="selectedColor"\n                ><\/ng-select>\n              <\/div>\n              <div class="col-2 p-0">\n                <small class="fw-bold text-muted">Quantity<\/small>\n                <input type="number" class="form-control" />\n              <\/div>\n            <\/div>\n            <div class="mt-3">\n              <button\n                class="btn btn-primary"\n                [ngClass]="\n                  product.availableQty > 0 ? 'btn-primary' : 'btn-secondary'\n                "\n                [disabled]="product.availableQty < 1"\n              >\n                ADD TO CART\n              <\/button>\n            <\/div>\n          <\/div>\n        <\/div>\n      <\/div>\n    <\/div>\n  <\/div>\n<\/div>\n`, stylePath: `src\\Tests\\app\\components\\product-popup\\product-popup.component.scss` }
};

/** {{ expr }} */
function interpolate(html, ctx){
  return html.replace(/\{\{\s*([^}]+)\s*\}\}/g, (_, expr) => {
    try { with (ctx) { const v = eval(expr); return (v ?? '') + ''; } }
    catch { return ''; }
  });
}

/** Applies [disabled], [ngClass], [ngStyle] after nodes are in the DOM */
function applyPropertyBindings(root, ctx){
  // [disabled]
  root.querySelectorAll('[\\[disabled\\]]').forEach(el => {
    const expr = el.getAttribute('[disabled]');
    let val = false; try { with(ctx){ val = !!eval(expr); } } catch {}
    if (val) el.setAttribute('disabled',''); else el.removeAttribute('disabled');
    el.removeAttribute('[disabled]');
  });

  // [ngClass]
  root.querySelectorAll('[\\[ngClass\\]]').forEach(el => {
    const expr = el.getAttribute('[ngClass]');
    let res = ''; try { with(ctx){ res = eval(expr); } } catch {}
    if (typeof res === 'string' && res.trim()) {
      el.className = (el.className + ' ' + res).trim();
    }
    el.removeAttribute('[ngClass]');
  });

  // [ngStyle]
  root.querySelectorAll('[\\[ngStyle\\]]').forEach(el => {
    const expr = el.getAttribute('[ngStyle]');
    let obj = {}; try { with(ctx){ obj = eval('(' + expr + ')'); } } catch {}
    if (obj && typeof obj === 'object') {
      for (const k of Object.keys(obj)) el.style[k] = obj[k];
    }
    el.removeAttribute('[ngStyle]');
  });
}

/** Expands *ngFor="let x of arr" */
function expandNgFor(html, ctx){
  const wrap = document.createElement('div');
  wrap.innerHTML = html;

  wrap.querySelectorAll('*[*ngFor]').forEach(node => {
    const dir = node.getAttribute('*ngFor'); // e.g. let product of productItems
    const m = /let\s+(\w+)\s+of\s+([^;]+)/.exec(dir);
    if (!m) { node.removeAttribute('*ngFor'); return; }
    const varName = m[1];
    const arrExpr = m[2];

    let arr = [];
    try { with (ctx) { arr = eval(arrExpr) || []; } } catch {}

    const parent = node.parentNode;
    const templateHtml = node.outerHTML.replace(/\s*\*ngFor="[^"]*"/, '');

    for (let i = 0; i < arr.length; i++) {
      const item = arr[i];
      const childCtx = Object.create(ctx);
      childCtx[varName] = item;
      childCtx.index = i;

      // Run interpolate before insertion so attributes are filled
      const piece = interpolate(templateHtml, childCtx);

      const temp = document.createElement('div');
      temp.innerHTML = piece;
      const el = temp.firstElementChild;
      if (!el) continue;

      parent.insertBefore(el, node);
      // bindings after insertion
      applyPropertyBindings(el, childCtx);
    }
    parent.removeChild(node);
  });

  return wrap.innerHTML;
}

/** Recursively expands <app-xyz> using COMPONENTS */
function expandCustomTags(html, ctx){
  const re = /<(app-[a-z0-9\-]+)([^>]*)>([\s\S]*?)<\/\1\s*>|<(app-[a-z0-9\-]+)([^>]*)\s*\/>/ig;
  return html.replace(re, (m, sel1, attrs1, inner, sel2, attrs2) => {
    const selector = sel1 || sel2;
    const comp = COMPONENTS[selector];
    if (!comp) return m;

    let out = comp.template;
    out = expandCustomTags(out, ctx); // depth-first
    out = expandNgFor(out, ctx);
    out = interpolate(out, ctx);
    return out;
  });
}

/** Delegated click handling for data-action="fn(args)" */
function wireClickDelegation(root, ctx){
  root.addEventListener('click', (e) => {
    const t = e.target.closest('[data-action]');
    if (!t) return;
    const expr = t.getAttribute('data-action');
    try { with (ctx) { eval(expr); } } catch (err) { console.error('action error:', err); }
  });
}

/** Main render */
function renderApp(rootSelector, rootComponentSelector, ctx){
  const rootEl = document.querySelector(rootSelector);
  if (!rootEl) return;

  const comp = COMPONENTS[rootComponentSelector];
  if (!comp) { rootEl.innerHTML = ''; return; }

  let html = comp.template;
  html = expandCustomTags(html, ctx);
  html = expandNgFor(html, ctx);
  html = interpolate(html, ctx);

  rootEl.innerHTML = html;
  applyPropertyBindings(rootEl, ctx);
  wireClickDelegation(rootEl, ctx);
}

// === Bootstrap ===
document.addEventListener('DOMContentLoaded', () => {
  const ctx = Object.assign({}, APP_DATA);
  // Example methods: you can generate from SymbolTable if you track methods
  ctx.cart = new Map();
  ctx.addToCart = (id) => {
    const key = String(id);
    ctx.cart.set(key, (ctx.cart.get(key) || 0) + 1);
    if (typeof ctx.updateCartBadge === 'function') ctx.updateCartBadge();
  };
  ctx.updateCartBadge = () => {
    const b = document.querySelector('.badge.rounded-pill.bg-danger');
    if (!b) return;
    let tot = 0; for (const v of ctx.cart.values()) tot += v; b.textContent = String(tot);
  };
  renderApp('#app', 'app-root', ctx);
});
